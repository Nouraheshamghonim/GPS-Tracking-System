#include "stdint.h"
#include "math.h"
#include"C:/Keil/EE319Kware/inc/tm4c123gh6pm.h"
#include "inc\tm4c123gh6pm.h"
#include "stdlib.h"
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
//function to convert from degree to rad 
float deg2rad (float deg) 
{ 
float Pi=3.142857; 
return (deg*PI/180); 
} 
//distance function 
float distanceCalc(float lng1, float lat1,float lng2, float lat2) 
{ 
float Longitude1= deg2rad(lng1); 
float Longitude2= deg2rad(lng2); 
float Latitude1= deg2rad(lat1); 
float Latitude2= deg2rad(lat2); 
float distance = 6378.137 
*acos(sin(Latitude1)*sin(Latitude2)+cos(Latitude1)*cos(Latitude2)*cos(Longitude 
2-Longitude1)); 
return distance; 
}
void UART2_write(char data)
{
while((UART2_FR_R&0x20)!=0){};
UART2_DR_R=data;
}
void UART_init(void)
{
    //activate UART2
SYSCTL_RCGCUART_R|= 0X004;
//INIT PORTD
SYSCTL_RCGCGPIO_R|=0X08;
while((SYSCTL_PRGPIO_R&0X08)==0){};
GPIO_PORTD_LOCK_R=0X4C4F434B;
GPIO_PORTD_CR_R|=0XC0;

GPIO_PORTD_DEN_R|=0XC0;
GPIO_PORTD_AMSEL_R&=~0XC0;
GPIO_PORTD_AFSEL_R|=0XC0;
GPIO_PORTD_PCTL_R=(GPIO_PORTD_PCTL_R&0X00ffffff)+0X11000000;
                                                //INIT UART2
UART2_CTL_R&=~0X001;
UART2_IBRD_R=104;
UART2_FBRD_R=11;
UART2_LCRH_R|=0X0070;
UART2_CTL_R|=0X0301;
}

char UART2_read(void)
{
    while((UART2_FR_R&0X10)!=0){};
    return(UART2_DR_R&0XFF);

}

// DELAYS 
void delay_milli(int n)
{ 
int i,j; 
for(i=0;i<n;i++) 
for(j=0;j<3180;j++) 
{} 
} 
void delay_micro(int n) 
{ 
int i,j; 
for(i=0;i<n;i++) 
for(j=0;j<3;j++) 
{} 
} 
// LCD 
void lcd_command (char c) 
{ GPIO_PORTA_DATA_R |= 0x00; //RS,RW,E=0 
GPIO_PORTB_DATA_R = c; // commands in portB 
GPIO_PORTA_DATA_R |= 0X80; // E=1 
delay_micro(0); 
GPIO_PORTA_DATA_R = 0x00; // E=0 
delay_milli(2); 
} 
void lcd_data (char d) 
{ GPIO_PORTA_DATA_R |= 0X20; //RS=0,RW=1,E=0
GPIO_PORTA_DATA_R |= 0X80; // E=1 
GPIO_PORTB_DATA_R = d; 
GPIO_PORTA_DATA_R = 0X00; //// E=0 
delay_micro(0); 
} 
void init(void) 
{ 
SYSCTL_RCGCGPIO_R|=0X03; 
while((SYSCTL_RCGCGPIO_R&0X03)==0){}; 
GPIO_PORTB_DIR_R |=0xFF; 
GPIO_PORTB_DEN_R |=0xFF; 
GPIO_PORTB_AMSEL_R &= ~0xFF; 
GPIO_PORTB_AFSEL_R &= ~0xFF; 
GPIO_PORTB_PCTL_R &= ~0xFFFFFFFF; 
GPIO_PORTA_DIR_R |=0xE0; 
GPIO_PORTA_DEN_R |=0xE0; 
GPIO_PORTA_AMSEL_R&= ~0xE0; 
GPIO_PORTA_AFSEL_R &= ~0xE0; 
GPIO_PORTA_PCTL_R &= ~0xFFF00000; 
lcd_command (0X38) ; //8bit data 
lcd_command (0X06) ; //shift cursor to right 
lcd_command (0X0F); // DISPLAY ON 
lcd_command (0X01); //CLEAR 
}
//LED 
void led_init(void) 
{ 
SYSCTL_RCGCGPIO_R|=0X20; 
while((SYSCTL_RCGCGPIO_R&0X20)==0){}; 
GPIO_PORTF_LOCK_R |=0x4C4F434B; 
GPIO_PORTF_CR_R |=0x02; 
GPIO_PORTF_DIR_R |=0x02; 
GPIO_PORTF_DEN_R |=0x02; 
GPIO_PORTF_AMSEL_R &= ~0x02; 
GPIO_PORTF_AFSEL_R &= ~0x02; 
GPIO_PORTF_PCTL_R &= ~0x0000F0; 
GPIO_PORTF_DATA_R |=0x02; 
} 
int main() 
{ 

init(); 
while(1) 
{ 

UART_init();
    UART2_read();

lcd_command (0x01); //CLEAR 
lcd_command (0X80); //LOCATION 
delay_milli(500); 
lcd_data ('D'); 
delay_milli(1);
lcd_data ('i'); 
delay_milli(1); 
lcd_data ('s'); 
delay_milli(1); 
lcd_data ('t'); 
delay_milli(1); 
lcd_data ('a'); 
delay_milli(1); 
lcd_data ('n'); 
delay_milli(1); 
lcd_data ('c'); 
delay_milli(1); 
lcd_data ('e'); 

if (Dis>=100) { 
led_init(); 

void readGPSModule(){
    int check = 0;
    char GPS_values[100],*token,parseValue[12][20];
    double latitude=0.0,longitude=0.0,seconds=0.0,minutes=0.0,Lat=0.0,Lon=0.0;
    char m0,m1,m2,m3,m4,m5,m6,m7;
    const char comma[2] = ",";



    int index=0,degrees;
    start:
    //is the incoming data is $GPRMC?
    while((UART5_FR_R&0x0010) !=0);
    m0 = UART5_DR_R&0xFF;
    if(m0 =='$'){
        while((UART5_FR_R&0x0010) !=0);
        m1 = UART5_DR_R &0xFF;
        if(m1 == 'G'){
            while((UART5_FR_R&0x0010) !=0);
            m2 = UART5_DR_R&0xFF;
            if(m2 == 'P'){
                while((UART5_FR_R&0x0010) !=0);
                m3 = UART5_DR_R&0xFF;
                if(m3 == 'R'){
                    while((UART5_FR_R&0x0010) !=0);
                    m4 = UART5_DR_R&0xFF;
                    if(m4 == 'M'){
                        while((UART5_FR_R&0x0010) !=0);
                        m5 = UART5_DR_R&0xFF;
                        if(m5 == 'C'){
                            while((UART5_FR_R&0x0010) !=0);
                            m6 = UART5_DR_R&0xFF;

                            if(m6 == ','){
                                while((UART5_FR_R&0x0010) !=0);
                                m7 = UART5_DR_R&0xFF;

                                //assign the data to the GPSValues array. read up to the last data checksum (like checksum: A*60)
                                while(m7 !='*'){
                                    GPS_values[index] = m7; //20
                                    while((UART5_FR_R&0x0010) !=0);
                                    m7 = UART5_DR_R&0xFF;
                                    index++;
                                }
                                //Separating the data in the GPSValues array by comma
                                index = 0;
                                token = strtok(GPS_values,comma);
                                while( token != NULL ) {
                                    strcpy(parseValue[index], token);
                                    token = strtok(NULL,comma);
                                    index++;}

                                //Data valid if parseValue[1] = A - not valid if =V
                                if(strcmp(parseValue[1],"A")==0){
                                    check = 1;
                                    latitude=atof(parseValue[2]);
                                    longitude=atof(parseValue[4]);

                                    //latitude calculation
                                    degrees=latitude/100;
                                    minutes=latitude-(double)(degrees*100);
                                    seconds=minutes/60.00;
                                    Lat=degrees+seconds;

                                    sprintf(latitudeIs,"%f", Lat);
                                    //print("%s\n",latitudeIs);

                                    //longitude calculation
                                    degrees=longitude/100;
                                    minutes=longitude-(double)(degrees*100);
                                    seconds=minutes/60.00;
                                    Lon=degrees+seconds;

                                    sprintf(longitudeIs,"%f",Lon);

                                    lat = Lat;
                                    lon = Lon;


                                    printf("lat = %s\n",latitudeIs);
                                    printf("lon = %s\n\n\n",longitudeIs);
                                   // LCD_command(0x01);
                                   // LCD_string(longitudeIs);



                                }


                                else{

                                    printf("\Error\n");

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (check == 0) { goto start; }
}

} 
} 
}
